{"ast":null,"code":"import { ApolloServer } from 'apollo-server-micro';\nimport resolvers from \"./resolvers\";\nimport typeDefs from \"./schemas\";\nimport { init } from \"./db/connection\";\nimport cookies from \"../../utils/cookies\";\nimport { userMiddleware } from \"./auth\";\ninit();\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: async ({\n    req,\n    res,\n    connection\n  }) => {\n    await userMiddleware(req, res);\n    let user = req && req.user ? req.user : null;\n    console.log(connection);\n\n    if (!req) {\n      if (connection && connection.context && connection.context.user) {\n        user = connection.context.user;\n      }\n\n      return {\n        user\n      };\n    }\n\n    const requestInfo = {\n      secure: req.secure,\n      cookies: req.cookies\n    };\n    return {\n      user,\n      res,\n      requestInfo\n    };\n  }\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst handler = apolloServer.createHandler({\n  path: '/api/graphql'\n});\nexport default cookies(handler);","map":{"version":3,"sources":["/home/erxes/work/erxes-client-portal/client/pages/api/graphql.ts"],"names":["ApolloServer","resolvers","typeDefs","init","cookies","userMiddleware","apolloServer","context","req","res","connection","user","console","log","requestInfo","secure","config","api","bodyParser","handler","createHandler","path"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B;AACA,OAAOC,SAAP;AACA,OAAOC,QAAP;AACA,SAASC,IAAT;AACA,OAAOC,OAAP;AACA,SAASC,cAAT;AAEAF,IAAI;AAEJ,MAAMG,YAAY,GAAG,IAAIN,YAAJ,CAAiB;AACpCE,EAAAA,QADoC;AAEpCD,EAAAA,SAFoC;AAGpCM,EAAAA,OAAO,EAAE,OAAO;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA;AAAZ,GAAP,KAAoC;AAC3C,UAAML,cAAc,CAACG,GAAD,EAAMC,GAAN,CAApB;AAEA,QAAIE,IAAI,GAAGH,GAAG,IAAIA,GAAG,CAACG,IAAX,GAAkBH,GAAG,CAACG,IAAtB,GAA6B,IAAxC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;;AAEA,QAAI,CAACF,GAAL,EAAU;AACR,UAAIE,UAAU,IAAIA,UAAU,CAACH,OAAzB,IAAoCG,UAAU,CAACH,OAAX,CAAmBI,IAA3D,EAAiE;AAC/DA,QAAAA,IAAI,GAAGD,UAAU,CAACH,OAAX,CAAmBI,IAA1B;AACD;;AAED,aAAO;AACLA,QAAAA;AADK,OAAP;AAGD;;AAED,UAAMG,WAAW,GAAG;AAClBC,MAAAA,MAAM,EAAEP,GAAG,CAACO,MADM;AAElBX,MAAAA,OAAO,EAAEI,GAAG,CAACJ;AAFK,KAApB;AAKA,WAAO;AACLO,MAAAA,IADK;AAELF,MAAAA,GAFK;AAGLK,MAAAA;AAHK,KAAP;AAKD;AA7BmC,CAAjB,CAArB;AAgCA,OAAO,MAAME,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,MAAMC,OAAO,GAAGb,YAAY,CAACc,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAhB;AAEA,eAAejB,OAAO,CAACe,OAAD,CAAtB","sourcesContent":["import { ApolloServer } from 'apollo-server-micro';\nimport resolvers from './resolvers';\nimport typeDefs from './schemas';\nimport { init } from './db/connection';\nimport cookies from '../../utils/cookies';\nimport { userMiddleware } from './auth';\n\ninit();\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: async ({ req, res, connection }) => {\n    await userMiddleware(req, res);\n\n    let user = req && req.user ? req.user : null;\n    console.log(connection);\n\n    if (!req) {\n      if (connection && connection.context && connection.context.user) {\n        user = connection.context.user;\n      }\n\n      return {\n        user\n      };\n    }\n\n    const requestInfo = {\n      secure: req.secure,\n      cookies: req.cookies\n    };\n\n    return {\n      user,\n      res,\n      requestInfo\n    };\n  }\n});\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nconst handler = apolloServer.createHandler({ path: '/api/graphql' });\n\nexport default cookies(handler);\n"]},"metadata":{},"sourceType":"module"}