{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/home/erxes/work/client/components/task/containers/Tasks.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { getTaskStages } from \"../../../pages/api/resolvers/queries/config\";\nimport Tasks from \"../components/Tasks\";\n\nfunction TasksContainer(props) {\n  _s();\n\n  const _useQuery = useQuery(gql(getTaskStages), {\n    variables: {\n      configId: process.env.CLIENT_PORTAL_CONFIG_ID\n    }\n  }),\n        loading = _useQuery.loading,\n        _useQuery$data = _useQuery.data,\n        data = _useQuery$data === void 0 ? {} : _useQuery$data;\n\n  const stages = data.getTaskStages || [];\n\n  const updatedProps = _objectSpread(_objectSpread({}, props), {}, {\n    stages,\n    loading\n  });\n\n  return /*#__PURE__*/_jsxDEV(Tasks, _objectSpread({}, updatedProps), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n}\n\n_s(TasksContainer, \"+DbGrwSDgFnPDXp1gYUwMeHyJL0=\", false, function () {\n  return [useQuery];\n});\n\n_c = TasksContainer;\nexport default TasksContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksContainer\");","map":{"version":3,"sources":["/home/erxes/work/client/components/task/containers/Tasks.tsx"],"names":["gql","useQuery","React","getTaskStages","Tasks","TasksContainer","props","variables","configId","process","env","CLIENT_PORTAL_CONFIG_ID","loading","data","stages","updatedProps"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT;AACA,OAAOC,KAAP;;AAIA,SAASC,cAAT,CAAwBC,KAAxB,EAAsC;AAAA;;AAAA,oBACLL,QAAQ,CAACD,GAAG,CAACG,aAAD,CAAJ,EAAqB;AAC1DI,IAAAA,SAAS,EAAE;AAAEC,MAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAxB;AAD+C,GAArB,CADH;AAAA,QAC5BC,OAD4B,aAC5BA,OAD4B;AAAA,mCACnBC,IADmB;AAAA,QACnBA,IADmB,+BACZ,EADY;;AAKpC,QAAMC,MAAM,GAAGD,IAAI,CAACV,aAAL,IAAsB,EAArC;;AAEA,QAAMY,YAAY,mCACbT,KADa;AAEhBQ,IAAAA,MAFgB;AAGhBF,IAAAA;AAHgB,IAAlB;;AAMA,sBAAO,QAAC,KAAD,oBAAWG,YAAX;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAdQV,c;UACwBJ,Q;;;KADxBI,c;AAgBT,eAAeA,cAAf","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { getTaskStages } from '../../../pages/api/resolvers/queries/config';\nimport Tasks from '../components/Tasks';\n\ntype Props = {};\n\nfunction TasksContainer(props: Props) {\n  const { loading, data = {} } = useQuery(gql(getTaskStages), {\n    variables: { configId: process.env.CLIENT_PORTAL_CONFIG_ID }\n  });\n\n  const stages = data.getTaskStages || [];\n\n  const updatedProps = {\n    ...props,\n    stages,\n    loading\n  };\n\n  return <Tasks {...updatedProps} />;\n}\n\nexport default TasksContainer;\n"]},"metadata":{},"sourceType":"module"}