{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/erxes/work/erxes-client-portal/client/components/appContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext } from 'react';\nimport { configClientPortal } from \"../pages/api/resolvers/queries/config\";\nimport { sendGraphQLRequest } from \"../pages/api/utils\";\nimport * as queries from \"./knowledgeBase/graphql/queries\";\nconst AppContext = /*#__PURE__*/createContext({});\nexport const AppConsumer = AppContext.Consumer;\n\nfunction AppProvider({\n  children,\n  currentUser\n}) {\n  _s();\n\n  console.log(currentUser);\n  const {\n    0: config,\n    1: setConfig\n  } = useState({});\n  const {\n    0: topic,\n    1: setTopic\n  } = useState({});\n  useEffect(() => {\n    const fetchConfig = async () => {\n      const response = await sendGraphQLRequest({\n        query: configClientPortal,\n        name: 'getConfig',\n        variables: {\n          _id: process.env.CLIENT_PORTAL_CONFIG_ID\n        }\n      });\n      setConfig(response);\n    };\n\n    fetchConfig();\n  }, []);\n  useEffect(() => {\n    if (config && config.knowledgeBaseTopicId) {\n      const fetchTopic = async () => {\n        const response = await sendGraphQLRequest({\n          query: queries.getKbTopicQuery,\n          name: 'widgetsKnowledgeBaseTopicDetail',\n          variables: {\n            _id: config.knowledgeBaseTopicId\n          }\n        });\n        setTopic(response);\n      };\n\n      fetchTopic();\n    }\n  }, [config]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      config,\n      topic,\n      currentUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppProvider, \"86Ad00Tk0wwX4eW0Pv0OPwzc7VQ=\");\n\n_c = AppProvider;\nexport default AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/home/erxes/work/erxes-client-portal/client/components/appContext.tsx"],"names":["React","useState","useEffect","createContext","configClientPortal","sendGraphQLRequest","queries","AppContext","AppConsumer","Consumer","AppProvider","children","currentUser","console","log","config","setConfig","topic","setTopic","fetchConfig","response","query","name","variables","_id","process","env","CLIENT_PORTAL_CONFIG_ID","knowledgeBaseTopicId","fetchTopic","getKbTopicQuery"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,SAASC,kBAAT;AACA,SAASC,kBAAT;AACA,OAAO,KAAKC,OAAZ;AAGA,MAAMC,UAAU,gBAAGJ,aAAa,CAAC,EAAD,CAAhC;AAEA,OAAO,MAAMK,WAAW,GAAGD,UAAU,CAACE,QAA/B;;AAOP,SAASC,WAAT,CAAqB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAArB,EAAuD;AAAA;;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,QAAM;AAAA,OAACG,MAAD;AAAA,OAASC;AAAT,MAAsBf,QAAQ,CAAS,EAAT,CAApC;AACA,QAAM;AAAA,OAACgB,KAAD;AAAA,OAAQC;AAAR,MAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,WAAW,GAAG,YAAY;AAC9B,YAAMC,QAAQ,GAAG,MAAMf,kBAAkB,CAAC;AACxCgB,QAAAA,KAAK,EAAEjB,kBADiC;AAExCkB,QAAAA,IAAI,EAAE,WAFkC;AAGxCC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB;AAH6B,OAAD,CAAzC;AAMAX,MAAAA,SAAS,CAACI,QAAD,CAAT;AACD,KARD;;AAUAD,IAAAA,WAAW;AACZ,GAZQ,EAYN,EAZM,CAAT;AAcAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,MAAM,IAAIA,MAAM,CAACa,oBAArB,EAA2C;AACzC,YAAMC,UAAU,GAAG,YAAY;AAC7B,cAAMT,QAAQ,GAAG,MAAMf,kBAAkB,CAAC;AACxCgB,UAAAA,KAAK,EAAEf,OAAO,CAACwB,eADyB;AAExCR,UAAAA,IAAI,EAAE,iCAFkC;AAGxCC,UAAAA,SAAS,EAAE;AAAEC,YAAAA,GAAG,EAAET,MAAM,CAACa;AAAd;AAH6B,SAAD,CAAzC;AAMAV,QAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,OARD;;AAUAS,MAAAA,UAAU;AACX;AACF,GAdQ,EAcN,CAACd,MAAD,CAdM,CAAT;AAgBA,sBACE,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUE,MAAAA,KAAV;AAAiBL,MAAAA;AAAjB,KAA5B;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAxCQD,W;;KAAAA,W;AA0CT,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect, createContext } from 'react';\nimport { configClientPortal } from '../pages/api/resolvers/queries/config';\nimport { sendGraphQLRequest } from '../pages/api/utils';\nimport * as queries from './knowledgeBase/graphql/queries';\nimport { Config, ICustomer } from './types';\n\nconst AppContext = createContext({});\n\nexport const AppConsumer = AppContext.Consumer;\n\ntype Props = {\n  children: any;\n  currentUser?: ICustomer;\n};\n\nfunction AppProvider({ children, currentUser }: Props) {\n  console.log(currentUser);\n  const [config, setConfig] = useState<Config>({});\n  const [topic, setTopic] = useState({});\n\n  useEffect(() => {\n    const fetchConfig = async () => {\n      const response = await sendGraphQLRequest({\n        query: configClientPortal,\n        name: 'getConfig',\n        variables: { _id: process.env.CLIENT_PORTAL_CONFIG_ID }\n      });\n\n      setConfig(response);\n    };\n\n    fetchConfig();\n  }, []);\n\n  useEffect(() => {\n    if (config && config.knowledgeBaseTopicId) {\n      const fetchTopic = async () => {\n        const response = await sendGraphQLRequest({\n          query: queries.getKbTopicQuery,\n          name: 'widgetsKnowledgeBaseTopicDetail',\n          variables: { _id: config.knowledgeBaseTopicId }\n        });\n\n        setTopic(response);\n      };\n\n      fetchTopic();\n    }\n  }, [config]);\n\n  return (\n    <AppContext.Provider value={{ config, topic, currentUser }}>\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport default AppProvider;\n"]},"metadata":{},"sourceType":"module"}