{"ast":null,"code":"import * as request from \"request\";\nexport const sendGraphQLRequest = ({\n  query,\n  variables,\n  name\n}) => {\n  return new Promise((resolve, reject) => {\n    request({\n      url: `http://localhost:3300/graphql`,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query,\n        variables\n      })\n    }, (error, _response, body) => {\n      if (error) {\n        return reject(error);\n      }\n\n      if (!body) {\n        return reject(`Could not fetch ${name}`);\n      }\n\n      const response = JSON.parse(body || \"{}\");\n      const {\n        data = {}\n      } = response || {};\n      return resolve(data[name]);\n    });\n  });\n};","map":{"version":3,"sources":["/home/erxes/work/erxes-client-portal/client/pages/api/utils.ts"],"names":["request","sendGraphQLRequest","query","variables","name","Promise","resolve","reject","url","method","headers","body","JSON","stringify","error","_response","response","parse","data"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,SAAzB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AACjCC,EAAAA,KADiC;AAEjCC,EAAAA,SAFiC;AAGjCC,EAAAA;AAHiC,CAAD,KAQ5B;AACJ,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,IAAAA,OAAO,CACL;AACEQ,MAAAA,GAAG,EAAG,+BADR;AAEEC,MAAAA,MAAM,EAAE,MAFV;AAGEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAHX;AAIEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEX,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAf;AAJR,KADK,EAOL,CAACW,KAAD,EAAQC,SAAR,EAAmBJ,IAAnB,KAA4B;AAC1B,UAAIG,KAAJ,EAAW;AACT,eAAOP,MAAM,CAACO,KAAD,CAAb;AACD;;AAED,UAAI,CAACH,IAAL,EAAW;AACT,eAAOJ,MAAM,CAAE,mBAAkBH,IAAK,EAAzB,CAAb;AACD;;AAED,YAAMY,QAAQ,GAAGJ,IAAI,CAACK,KAAL,CAAWN,IAAI,IAAI,IAAnB,CAAjB;AAEA,YAAM;AAAEO,QAAAA,IAAI,GAAG;AAAT,UAAgBF,QAAQ,IAAI,EAAlC;AAEA,aAAOV,OAAO,CAACY,IAAI,CAACd,IAAD,CAAL,CAAd;AACD,KArBI,CAAP;AAuBD,GAxBM,CAAP;AAyBD,CAlCM","sourcesContent":["import * as request from \"request\";\n\nexport const sendGraphQLRequest = ({\n  query,\n  variables,\n  name,\n}: {\n  name: string;\n  query: string;\n  variables?: { [key: string]: string };\n}) => {\n  return new Promise((resolve, reject) => {\n    request(\n      {\n        url: `http://localhost:3300/graphql`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ query, variables }),\n      },\n      (error, _response, body) => {\n        if (error) {\n          return reject(error);\n        }\n\n        if (!body) {\n          return reject(`Could not fetch ${name}`);\n        }\n\n        const response = JSON.parse(body || \"{}\");\n\n        const { data = {} } = response || {};\n\n        return resolve(data[name]);\n      }\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"module"}