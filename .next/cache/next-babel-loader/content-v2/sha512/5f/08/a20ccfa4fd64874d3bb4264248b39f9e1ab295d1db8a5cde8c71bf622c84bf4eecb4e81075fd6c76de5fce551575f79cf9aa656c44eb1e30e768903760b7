{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useState, useEffect, createContext } from 'react';\nimport { configClientPortal } from '../pages/api/resolvers/config';\nimport { sendGraphQLRequest } from '../pages/api/utils';\nimport * as queries from './knowledgeBase/graphql/queries';\nvar AppContext = /*#__PURE__*/createContext({});\nexport var AppConsumer = AppContext.Consumer;\n\nfunction AppProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState({}),\n      config = _useState[0],\n      setConfig = _useState[1];\n\n  var _useState2 = useState({}),\n      topic = _useState2[0],\n      setTopic = _useState2[1];\n\n  useEffect(function () {\n    var fetchConfig = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return sendGraphQLRequest({\n                  query: configClientPortal,\n                  name: 'configClientPortal'\n                });\n\n              case 2:\n                response = _context.sent;\n                setConfig(response);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchConfig() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchConfig();\n  }, []);\n  useEffect(function () {\n    if (config.knowledgeBaseTopicId) {\n      var fetchTopic = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return sendGraphQLRequest({\n                    query: queries.getKbTopicQuery,\n                    name: 'widgetsKnowledgeBaseTopicDetail',\n                    variables: {\n                      _id: config.knowledgeBaseTopicId\n                    }\n                  });\n\n                case 2:\n                  response = _context2.sent;\n                  setTopic(response);\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function fetchTopic() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n\n      fetchTopic();\n    }\n\n    ;\n  }, [config]);\n  return /*#__PURE__*/_jsx(AppContext.Provider, {\n    value: {\n      config: config,\n      topic: topic\n    },\n    children: children\n  });\n}\n\nexport default AppProvider;","map":null,"metadata":{},"sourceType":"module"}