{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/erxes/work/client/components/appContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext } from 'react';\nimport { configClientPortal } from \"../pages/api/resolvers/queries/config\";\nimport { sendGraphQLRequest } from \"../pages/api/utils\";\nimport * as queries from \"./knowledgeBase/graphql/queries\";\nconst AppContext = /*#__PURE__*/createContext({});\nexport const AppConsumer = AppContext.Consumer;\n\nfunction AppProvider({\n  children,\n  currentUser\n}) {\n  _s();\n\n  const _useState = useState({}),\n        config = _useState[0],\n        setConfig = _useState[1];\n\n  const _useState2 = useState({}),\n        topic = _useState2[0],\n        setTopic = _useState2[1];\n\n  useEffect(() => {\n    const fetchConfig = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return sendGraphQLRequest({\n                query: configClientPortal,\n                name: 'getConfig',\n                variables: {\n                  _id: process.env.CLIENT_PORTAL_CONFIG_ID\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              setConfig(response);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchConfig() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchConfig();\n  }, []);\n  useEffect(() => {\n    if (config && config.knowledgeBaseTopicId) {\n      const fetchTopic = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return sendGraphQLRequest({\n                  query: queries.getKbTopicQuery,\n                  name: 'widgetsKnowledgeBaseTopicDetail',\n                  variables: {\n                    _id: config.knowledgeBaseTopicId\n                  }\n                });\n\n              case 2:\n                response = _context2.sent;\n                setTopic(response);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2);\n        }));\n\n        return function fetchTopic() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      fetchTopic();\n    }\n  }, [config]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      config,\n      topic,\n      currentUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppProvider, \"86Ad00Tk0wwX4eW0Pv0OPwzc7VQ=\");\n\n_c = AppProvider;\nexport default AppProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/home/erxes/work/client/components/appContext.tsx"],"names":["React","useState","useEffect","createContext","configClientPortal","sendGraphQLRequest","queries","AppContext","AppConsumer","Consumer","AppProvider","children","currentUser","config","setConfig","topic","setTopic","fetchConfig","query","name","variables","_id","process","env","CLIENT_PORTAL_CONFIG_ID","response","knowledgeBaseTopicId","fetchTopic","getKbTopicQuery"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,SAASC,kBAAT;AACA,SAASC,kBAAT;AACA,OAAO,KAAKC,OAAZ;AAGA,MAAMC,UAAU,gBAAGJ,aAAa,CAAC,EAAD,CAAhC;AAEA,OAAO,MAAMK,WAAW,GAAGD,UAAU,CAACE,QAA/B;;AAOP,SAASC,WAAT,CAAqB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAArB,EAAuD;AAAA;;AAAA,oBACzBX,QAAQ,CAAS,EAAT,CADiB;AAAA,QAC9CY,MAD8C;AAAA,QACtCC,SADsC;;AAAA,qBAE3Bb,QAAQ,CAAC,EAAD,CAFmB;AAAA,QAE9Cc,KAF8C;AAAA,QAEvCC,QAFuC;;AAIrDd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,WAAW;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKZ,kBAAkB,CAAC;AACxCa,gBAAAA,KAAK,EAAEd,kBADiC;AAExCe,gBAAAA,IAAI,EAAE,WAFkC;AAGxCC,gBAAAA,SAAS,EAAE;AAAEC,kBAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB;AAH6B,eAAD,CADvB;;AAAA;AACZC,cAAAA,QADY;AAOlBX,cAAAA,SAAS,CAACW,QAAD,CAAT;;AAPkB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAXR,WAAW;AAAA;AAAA;AAAA,OAAjB;;AAUAA,IAAAA,WAAW;AACZ,GAZQ,EAYN,EAZM,CAAT;AAcAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,MAAM,IAAIA,MAAM,CAACa,oBAArB,EAA2C;AACzC,YAAMC,UAAU;AAAA,6EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACMtB,kBAAkB,CAAC;AACxCa,kBAAAA,KAAK,EAAEZ,OAAO,CAACsB,eADyB;AAExCT,kBAAAA,IAAI,EAAE,iCAFkC;AAGxCC,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,GAAG,EAAER,MAAM,CAACa;AAAd;AAH6B,iBAAD,CADxB;;AAAA;AACXD,gBAAAA,QADW;AAOjBT,gBAAAA,QAAQ,CAACS,QAAD,CAAR;;AAPiB;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH;;AAAA,wBAAVE,UAAU;AAAA;AAAA;AAAA,SAAhB;;AAUAA,MAAAA,UAAU;AACX;AACF,GAdQ,EAcN,CAACd,MAAD,CAdM,CAAT;AAgBA,sBACE,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUE,MAAAA,KAAV;AAAiBH,MAAAA;AAAjB,KAA5B;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAvCQD,W;;KAAAA,W;AAyCT,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect, createContext } from 'react';\nimport { configClientPortal } from '../pages/api/resolvers/queries/config';\nimport { sendGraphQLRequest } from '../pages/api/utils';\nimport * as queries from './knowledgeBase/graphql/queries';\nimport { Config, ICustomer } from './types';\n\nconst AppContext = createContext({});\n\nexport const AppConsumer = AppContext.Consumer;\n\ntype Props = {\n  children: any;\n  currentUser?: ICustomer;\n};\n\nfunction AppProvider({ children, currentUser }: Props) {\n  const [config, setConfig] = useState<Config>({});\n  const [topic, setTopic] = useState({});\n\n  useEffect(() => {\n    const fetchConfig = async () => {\n      const response = await sendGraphQLRequest({\n        query: configClientPortal,\n        name: 'getConfig',\n        variables: { _id: process.env.CLIENT_PORTAL_CONFIG_ID }\n      });\n\n      setConfig(response);\n    };\n\n    fetchConfig();\n  }, []);\n\n  useEffect(() => {\n    if (config && config.knowledgeBaseTopicId) {\n      const fetchTopic = async () => {\n        const response = await sendGraphQLRequest({\n          query: queries.getKbTopicQuery,\n          name: 'widgetsKnowledgeBaseTopicDetail',\n          variables: { _id: config.knowledgeBaseTopicId }\n        });\n\n        setTopic(response);\n      };\n\n      fetchTopic();\n    }\n  }, [config]);\n\n  return (\n    <AppContext.Provider value={{ config, topic, currentUser }}>\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport default AppProvider;\n"]},"metadata":{},"sourceType":"module"}