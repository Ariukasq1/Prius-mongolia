{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/erxes/work/client/components/ticket/containers/Ticket.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { getTasks } from \"../../../pages/api/resolvers/queries/config\";\nimport Ticket from \"../components/Ticket\";\n\nfunction TicketContainer(_ref) {\n  _s();\n\n  let stageId = _ref.stageId,\n      props = _objectWithoutProperties(_ref, [\"stageId\"]);\n\n  const _useQuery = useQuery(gql(getTasks), {\n    variables: {\n      stageId: stageId || '3vKotSwXRQr84wwJT'\n    }\n  }),\n        loading = _useQuery.loading,\n        _useQuery$data = _useQuery.data,\n        data = _useQuery$data === void 0 ? {} : _useQuery$data;\n\n  const tickets = data.getTasks || [];\n\n  const updatedProps = _objectSpread(_objectSpread({}, props), {}, {\n    tickets,\n    loading\n  });\n\n  return /*#__PURE__*/_jsxDEV(Ticket, _objectSpread({}, updatedProps), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n}\n\n_s(TicketContainer, \"+DbGrwSDgFnPDXp1gYUwMeHyJL0=\", false, function () {\n  return [useQuery];\n});\n\n_c = TicketContainer;\nexport default TicketContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicketContainer\");","map":{"version":3,"sources":["/home/erxes/work/client/components/ticket/containers/Ticket.tsx"],"names":["gql","useQuery","React","getTasks","Ticket","TicketContainer","stageId","props","variables","loading","data","tickets","updatedProps"],"mappings":";;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT;AACA,OAAOC,MAAP;;AAMA,SAASC,eAAT,OAAuD;AAAA;;AAAA,MAA5BC,OAA4B,QAA5BA,OAA4B;AAAA,MAAhBC,KAAgB;;AAAA,oBACtBN,QAAQ,CAACD,GAAG,CAACG,QAAD,CAAJ,EAAgB;AACrDK,IAAAA,SAAS,EAAE;AAAEF,MAAAA,OAAO,EAAEA,OAAO,IAAI;AAAtB;AAD0C,GAAhB,CADc;AAAA,QAC7CG,OAD6C,aAC7CA,OAD6C;AAAA,mCACpCC,IADoC;AAAA,QACpCA,IADoC,+BAC7B,EAD6B;;AAKrD,QAAMC,OAAO,GAAGD,IAAI,CAACP,QAAL,IAAiB,EAAjC;;AAEA,QAAMS,YAAY,mCACbL,KADa;AAEhBI,IAAAA,OAFgB;AAGhBF,IAAAA;AAHgB,IAAlB;;AAMA,sBAAO,QAAC,MAAD,oBAAYG,YAAZ;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAdQP,e;UACwBJ,Q;;;KADxBI,e;AAgBT,eAAeA,eAAf","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { getTasks } from '../../../pages/api/resolvers/queries/config';\nimport Ticket from '../components/Ticket';\n\ntype Props = {\n  stageId?: string;\n};\n\nfunction TicketContainer({ stageId, ...props }: Props) {\n  const { loading, data = {} } = useQuery(gql(getTasks), {\n    variables: { stageId: stageId || '3vKotSwXRQr84wwJT' }\n  });\n\n  const tickets = data.getTasks || [];\n\n  const updatedProps = {\n    ...props,\n    tickets,\n    loading\n  };\n\n  return <Ticket {...updatedProps} />;\n}\n\nexport default TicketContainer;\n"]},"metadata":{},"sourceType":"module"}