{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/erxes/work/erxes-client-portal/client/components/common/Form.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport validator from 'validator';\nimport { generateRandomString, isValidUsername } from \"./utils\";\nimport { Error } from \"../styles/form\";\n\nclass Form extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"formId\", generateRandomString());\n\n    _defineProperty(this, \"children\", []);\n\n    _defineProperty(this, \"registerChild\", child => {\n      this.children.push(child);\n    });\n\n    _defineProperty(this, \"resetSubmit\", () => {\n      this.setState({\n        isSubmitted: false\n      });\n    });\n\n    _defineProperty(this, \"runValidations\", () => {\n      const errors = {};\n      const values = {};\n\n      for (const child of this.children) {\n        errors[child.props.name] = this.validate(child);\n        values[child.props.name] = this.getValue(child);\n      }\n\n      this.setState({\n        errors,\n        values\n      }, () => {\n        const hasErrors = Object.values(errors).some(error => error !== null);\n\n        if (hasErrors) {\n          return;\n        }\n\n        if (this.props.onSubmit) {\n          return this.props.onSubmit(this.state.values);\n        }\n\n        this.setState({\n          isSubmitted: !this.state.isSubmitted\n        });\n      });\n    });\n\n    _defineProperty(this, \"getSelector\", name => {\n      return document.querySelector(`#${this.formId} [name='${name}']`);\n    });\n\n    _defineProperty(this, \"getValue\", child => {\n      const element = this.getSelector(child.props.name);\n      console.log(element);\n\n      if (element) {\n        return element.value;\n      }\n\n      return '';\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.runValidations();\n    });\n\n    _defineProperty(this, \"validate\", child => {\n      const {\n        props\n      } = child;\n      const element = this.getSelector(props.name);\n      const value = element ? element.value : '';\n\n      if (props.required && !value) {\n        return /*#__PURE__*/_jsxDEV(Error, {\n          children: \"Required field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 14\n        }, this);\n      }\n\n      if (props.type === 'email' && !validator.isEmail(value)) {\n        return /*#__PURE__*/_jsxDEV(Error, {\n          children: \"Invalid email format! Please enter a valid email address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this);\n      }\n\n      if (props.max && !validator.isLength('description', {\n        min: 0,\n        max: props.max\n      })) {\n        return /*#__PURE__*/_jsxDEV(Error, {\n          children: [\"Maximum length is \", props.max, \" characters\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 14\n        }, this);\n      }\n\n      if (value && props.type === 'url' && !validator.isURL(value)) {\n        return /*#__PURE__*/_jsxDEV(Error, {\n          children: \"Invalid link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 14\n        }, this);\n      }\n\n      if (value && props.type === 'number' && !validator.isFloat(value)) {\n        return /*#__PURE__*/_jsxDEV(Error, {\n          children: \"Invalid number format! Please enter a valid number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 14\n        }, this);\n      }\n\n      if (value && props.name === 'username' && !isValidUsername(value)) {\n        return /*#__PURE__*/_jsxDEV(Error, {\n          children: \"Invalid Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 14\n        }, this);\n      }\n\n      return null;\n    });\n\n    this.state = {\n      errors: {},\n      values: {},\n      isSubmitted: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      id: this.formId,\n      onSubmit: this.onSubmit,\n      noValidate: true,\n      autoComplete: this.props.autoComplete,\n      children: this.props.renderContent({\n        errors: this.state.errors,\n        values: this.state.values,\n        registerChild: this.registerChild,\n        runValidations: this.runValidations,\n        isSubmitted: this.state.isSubmitted,\n        resetSubmit: this.resetSubmit\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/home/erxes/work/erxes-client-portal/client/components/common/Form.tsx"],"names":["React","validator","generateRandomString","isValidUsername","Error","Form","Component","constructor","props","child","children","push","setState","isSubmitted","errors","values","name","validate","getValue","hasErrors","Object","some","error","onSubmit","state","document","querySelector","formId","element","getSelector","console","log","value","e","preventDefault","stopPropagation","runValidations","required","type","isEmail","max","isLength","min","isURL","isFloat","render","autoComplete","renderContent","registerChild","resetSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport validator from 'validator';\nimport { generateRandomString, isValidUsername } from './utils';\nimport { Error } from '../styles/form';\n\ntype Props = {\n  renderContent: (props: IFormProps) => React.ReactNode;\n  onSubmit?: (values: any) => any;\n  autoComplete?: string;\n};\n\ntype State = {\n  errors: any;\n  values: any;\n  isSubmitted: boolean;\n};\n\ntype IFormProps = {\n  errors: any;\n  values: any;\n  registerChild: (child: React.ReactNode) => void;\n  runValidations?: (callback: any) => void;\n  resetSubmit?: () => void;\n  isSubmitted: boolean;\n};\n\nclass Form extends React.Component<Props, State> {\n  private formId: string = generateRandomString();\n  private children: any[] = [];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      errors: {},\n      values: {},\n      isSubmitted: false\n    };\n  }\n\n  registerChild = child => {\n    this.children.push(child);\n  };\n\n  resetSubmit = () => {\n    this.setState({ isSubmitted: false });\n  };\n\n  runValidations = () => {\n    const errors = {};\n    const values = {};\n\n    for (const child of this.children) {\n      errors[child.props.name] = this.validate(child);\n      values[child.props.name] = this.getValue(child);\n    }\n\n    this.setState({ errors, values }, () => {\n      const hasErrors = Object.values(errors).some(error => error !== null);\n\n      if (hasErrors) {\n        return;\n      }\n\n      if (this.props.onSubmit) {\n        return this.props.onSubmit(this.state.values);\n      }\n\n      this.setState({ isSubmitted: !this.state.isSubmitted });\n    });\n  };\n\n  getSelector = (name: string) => {\n    return document.querySelector(`#${this.formId} [name='${name}']`) as any;\n  };\n\n  getValue = child => {\n    const element = this.getSelector(child.props.name);\n    console.log(element);\n\n    if (element) {\n      return element.value;\n    }\n\n    return '';\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.runValidations();\n  };\n\n  validate = child => {\n    const { props } = child;\n    const element = this.getSelector(props.name);\n    const value = element ? element.value : '';\n\n    if (props.required && !value) {\n      return <Error>Required field</Error>;\n    }\n\n    if (props.type === 'email' && !validator.isEmail(value)) {\n      return (\n        <Error>Invalid email format! Please enter a valid email address</Error>\n      );\n    }\n\n    if (\n      props.max &&\n      !validator.isLength('description', { min: 0, max: props.max })\n    ) {\n      return <Error>Maximum length is {props.max} characters</Error>;\n    }\n\n    if (value && props.type === 'url' && !validator.isURL(value)) {\n      return <Error>Invalid link</Error>;\n    }\n\n    if (value && props.type === 'number' && !validator.isFloat(value)) {\n      return <Error>Invalid number format! Please enter a valid number</Error>;\n    }\n\n    if (value && props.name === 'username' && !isValidUsername(value)) {\n      return <Error>Invalid Username</Error>;\n    }\n\n    return null;\n  };\n\n  render() {\n    return (\n      <form\n        id={this.formId}\n        onSubmit={this.onSubmit}\n        noValidate={true}\n        autoComplete={this.props.autoComplete}\n      >\n        {this.props.renderContent({\n          errors: this.state.errors,\n          values: this.state.values,\n          registerChild: this.registerChild,\n          runValidations: this.runValidations,\n          isSubmitted: this.state.isSubmitted,\n          resetSubmit: this.resetSubmit\n        })}\n      </form>\n    );\n  }\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}