{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { sendGraphQLRequest } from \"../../utils\";\nexport const configClientPortal = \"\\n  query getConfig($_id: String!) {\\n    getConfig(_id: $_id) {\\n      _id\\n      name\\n      description\\n      logo\\n      icon\\n      url\\n      knowledgeBaseLabel\\n      knowledgeBaseTopicId\\n      taskLabel\\n      taskStageId\\n      ticketLabel\\n      ticketStageId\\n    }\\n  }\\n\";\nexport const getTaskStages = \"\\n  query getTaskStages($configId: String!) {\\n    getTaskStages(configId: $configId)\\n  }\\n\";\nexport const getTasks = \"\\n  query getTasks($stageId: String!) {\\n    getTasks(stageId: $stageId)\\n  }\\n\";\nconst configQueries = {\n  getConfig(_root) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return sendGraphQLRequest({\n              query: configClientPortal,\n              name: 'configClientPortal'\n            });\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  },\n\n  getTaskStages(_root, {\n    configId\n  }) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return sendGraphQLRequest({\n              query: getTaskStages,\n              name: 'getTaskStages',\n              variables: {\n                configId\n              }\n            });\n\n          case 2:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  },\n\n  getTasks(_root, {\n    stageId\n  }) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return sendGraphQLRequest({\n              query: getTasks,\n              name: 'getTasks',\n              variables: {\n                stageId\n              }\n            });\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n\n};\nexport default configQueries;","map":{"version":3,"sources":["/home/erxes/work/client/pages/api/resolvers/queries/config.ts"],"names":["sendGraphQLRequest","configClientPortal","getTaskStages","getTasks","configQueries","getConfig","_root","query","name","response","configId","variables","stageId"],"mappings":";;AAAA,SAASA,kBAAT;AAEA,OAAO,MAAMC,kBAAkB,kSAAxB;AAmBP,OAAO,MAAMC,aAAa,iGAAnB;AAMP,OAAO,MAAMC,QAAQ,oFAAd;AAMP,MAAMC,aAAa,GAAG;AACdC,EAAAA,SAAN,CAAgBC,KAAhB,EAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACEN,kBAAkB,CAAC;AACxCO,cAAAA,KAAK,EAAEN,kBADiC;AAExCO,cAAAA,IAAI,EAAE;AAFkC,aAAD,CADpB;;AAAA;AACfC,YAAAA,QADe;AAAA,6CAMdA,QANc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOtB,GARmB;;AAUdP,EAAAA,aAAN,CAAoBI,KAApB,EAA2B;AAAEI,IAAAA;AAAF,GAA3B,EAA+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACtCV,kBAAkB,CAAC;AACxCO,cAAAA,KAAK,EAAEL,aADiC;AAExCM,cAAAA,IAAI,EAAE,eAFkC;AAGxCG,cAAAA,SAAS,EAAE;AAAED,gBAAAA;AAAF;AAH6B,aAAD,CADoB;;AAAA;AACvDD,YAAAA,QADuD;AAAA,8CAOtDA,QAPsD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ9D,GAlBmB;;AAoBdN,EAAAA,QAAN,CAAeG,KAAf,EAAsB;AAAEM,IAAAA;AAAF,GAAtB,EAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC/BZ,kBAAkB,CAAC;AACxCO,cAAAA,KAAK,EAAEJ,QADiC;AAExCK,cAAAA,IAAI,EAAE,UAFkC;AAGxCG,cAAAA,SAAS,EAAE;AAAEC,gBAAAA;AAAF;AAH6B,aAAD,CADa;;AAAA;AAChDH,YAAAA,QADgD;AAAA,8CAO/CA,QAP+C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQvD;;AA5BmB,CAAtB;AA+BA,eAAeL,aAAf","sourcesContent":["import { sendGraphQLRequest } from '../../utils';\n\nexport const configClientPortal = `\n  query getConfig($_id: String!) {\n    getConfig(_id: $_id) {\n      _id\n      name\n      description\n      logo\n      icon\n      url\n      knowledgeBaseLabel\n      knowledgeBaseTopicId\n      taskLabel\n      taskStageId\n      ticketLabel\n      ticketStageId\n    }\n  }\n`;\n\nexport const getTaskStages = `\n  query getTaskStages($configId: String!) {\n    getTaskStages(configId: $configId)\n  }\n`;\n\nexport const getTasks = `\n  query getTasks($stageId: String!) {\n    getTasks(stageId: $stageId)\n  }\n`;\n\nconst configQueries = {\n  async getConfig(_root) {\n    const response = await sendGraphQLRequest({\n      query: configClientPortal,\n      name: 'configClientPortal'\n    });\n\n    return response;\n  },\n\n  async getTaskStages(_root, { configId }: { configId: string }) {\n    const response = await sendGraphQLRequest({\n      query: getTaskStages,\n      name: 'getTaskStages',\n      variables: { configId }\n    });\n\n    return response;\n  },\n\n  async getTasks(_root, { stageId }: { stageId: string }) {\n    const response = await sendGraphQLRequest({\n      query: getTasks,\n      name: 'getTasks',\n      variables: { stageId }\n    });\n\n    return response;\n  }\n};\n\nexport default configQueries;\n"]},"metadata":{},"sourceType":"module"}