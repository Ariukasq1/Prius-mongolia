{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as dotenv from 'dotenv';\nimport mongoose from 'mongoose';\nimport { debugDb } from \"../../../debugger\";\ndotenv.config();\nconst {\n  NODE_ENV,\n  MONGO_URL = ''\n} = process.env;\nexport let client;\nexport const connectionOptions = {\n  useNewUrlParser: true,\n  useCreateIndex: true,\n  autoReconnect: true,\n  useFindAndModify: false\n};\nmongoose.Promise = global.Promise;\nmongoose.connection.on('connected', () => {\n  if (NODE_ENV !== 'test') {\n    debugDb(`Connected to the database: ${MONGO_URL}`);\n  }\n}).on('disconnected', () => {\n  debugDb(`Disconnected from the database: ${MONGO_URL}`);\n}).on('error', error => {\n  debugDb(`Database connection error: ${MONGO_URL}`, error);\n});\n\nconst connect = async (URL, options) => {\n  client = mongoose.connect(URL || MONGO_URL, _objectSpread(_objectSpread({}, connectionOptions), options || {\n    poolSize: 100\n  }));\n};\n\nexport function disconnect() {\n  return mongoose.connection.close();\n}\nexport const init = async () => {\n  console.log(client);\n\n  if (!client || client && !client.isConnected()) {\n    client = await connect();\n  }\n};\ninit();","map":{"version":3,"sources":["/home/erxes/work/erxes-client-portal/client/pages/api/db/connection.ts"],"names":["dotenv","mongoose","debugDb","config","NODE_ENV","MONGO_URL","process","env","client","connectionOptions","useNewUrlParser","useCreateIndex","autoReconnect","useFindAndModify","Promise","global","connection","on","error","connect","URL","options","poolSize","disconnect","close","init","console","log","isConnected"],"mappings":";;;;;;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,OAAT;AAEAF,MAAM,CAACG,MAAP;AAEA,MAAM;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,SAAS,GAAG;AAAxB,IAA+BC,OAAO,CAACC,GAA7C;AAEA,OAAO,IAAIC,MAAJ;AAEP,OAAO,MAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,eAAe,EAAE,IADc;AAE/BC,EAAAA,cAAc,EAAE,IAFe;AAG/BC,EAAAA,aAAa,EAAE,IAHgB;AAI/BC,EAAAA,gBAAgB,EAAE;AAJa,CAA1B;AAONZ,QAAQ,CAACa,OAAV,GAA4BC,MAAM,CAACD,OAAnC;AAEAb,QAAQ,CAACe,UAAT,CACGC,EADH,CACM,WADN,EACmB,MAAM;AACrB,MAAIb,QAAQ,KAAK,MAAjB,EAAyB;AACvBF,IAAAA,OAAO,CAAE,8BAA6BG,SAAU,EAAzC,CAAP;AACD;AACF,CALH,EAMGY,EANH,CAMM,cANN,EAMsB,MAAM;AACxBf,EAAAA,OAAO,CAAE,mCAAkCG,SAAU,EAA9C,CAAP;AACD,CARH,EASGY,EATH,CASM,OATN,EASeC,KAAK,IAAI;AACpBhB,EAAAA,OAAO,CAAE,8BAA6BG,SAAU,EAAzC,EAA4Ca,KAA5C,CAAP;AACD,CAXH;;AAaA,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAqBC,OAArB,KAAkC;AAChDb,EAAAA,MAAM,GAAGP,QAAQ,CAACkB,OAAT,CAAiBC,GAAG,IAAIf,SAAxB,kCACJI,iBADI,GAEHY,OAAO,IAAI;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAFR,EAAT;AAID,CALD;;AAOA,OAAO,SAASC,UAAT,GAAsB;AAC3B,SAAOtB,QAAQ,CAACe,UAAT,CAAoBQ,KAApB,EAAP;AACD;AAED,OAAO,MAAMC,IAAI,GAAG,YAAY;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAZ;;AACA,MAAI,CAACA,MAAD,IAAYA,MAAM,IAAI,CAACA,MAAM,CAACoB,WAAP,EAA3B,EAAkD;AAChDpB,IAAAA,MAAM,GAAG,MAAMW,OAAO,EAAtB;AACD;AACF,CALM;AAOPM,IAAI","sourcesContent":["import * as dotenv from 'dotenv';\nimport mongoose from 'mongoose';\nimport { debugDb } from '../../../debugger';\n\ndotenv.config();\n\nconst { NODE_ENV, MONGO_URL = '' } = process.env;\n\nexport let client;\n\nexport const connectionOptions = {\n  useNewUrlParser: true,\n  useCreateIndex: true,\n  autoReconnect: true,\n  useFindAndModify: false\n};\n\n(mongoose.Promise as any) = global.Promise;\n\nmongoose.connection\n  .on('connected', () => {\n    if (NODE_ENV !== 'test') {\n      debugDb(`Connected to the database: ${MONGO_URL}`);\n    }\n  })\n  .on('disconnected', () => {\n    debugDb(`Disconnected from the database: ${MONGO_URL}`);\n  })\n  .on('error', error => {\n    debugDb(`Database connection error: ${MONGO_URL}`, error);\n  });\n\nconst connect = async (URL?: string, options?) => {\n  client = mongoose.connect(URL || MONGO_URL, {\n    ...connectionOptions,\n    ...(options || { poolSize: 100 })\n  });\n};\n\nexport function disconnect() {\n  return mongoose.connection.close();\n}\n\nexport const init = async () => {\n  console.log(client);\n  if (!client || (client && !client.isConnected())) {\n    client = await connect();\n  }\n};\n\ninit();\n"]},"metadata":{},"sourceType":"module"}