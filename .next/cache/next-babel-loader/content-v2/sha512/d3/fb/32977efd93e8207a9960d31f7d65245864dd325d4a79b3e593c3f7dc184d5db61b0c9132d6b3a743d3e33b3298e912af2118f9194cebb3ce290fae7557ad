{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, createContext } from 'react';\nimport { configClientPortal } from '../pages/api/resolvers/config';\nimport { sendGraphQLRequest } from '../pages/api/utils';\nimport * as queries from './knowledgeBase/graphql/queries';\nconst AppContext = /*#__PURE__*/createContext({});\nexport const AppConsumer = AppContext.Consumer;\n\nfunction AppProvider({\n  children\n}) {\n  const {\n    0: config,\n    1: setConfig\n  } = useState({});\n  const {\n    0: topic,\n    1: setTopic\n  } = useState({});\n  useEffect(() => {\n    const fetchConfig = async () => {\n      const response = await sendGraphQLRequest({\n        query: configClientPortal,\n        name: 'configClientPortal'\n      });\n      setConfig(response);\n    };\n\n    fetchConfig();\n  }, []);\n  useEffect(() => {\n    if (config.knowledgeBaseTopicId) {\n      const fetchTopic = async () => {\n        const response = await sendGraphQLRequest({\n          query: queries.getKbTopicQuery,\n          name: 'widgetsKnowledgeBaseTopicDetail',\n          variables: {\n            _id: config.knowledgeBaseTopicId\n          }\n        });\n        setTopic(response);\n      };\n\n      fetchTopic();\n    }\n\n    ;\n  }, [config]);\n  return /*#__PURE__*/_jsx(AppContext.Provider, {\n    value: {\n      config,\n      topic\n    },\n    children: children\n  });\n}\n\nexport default AppProvider;","map":null,"metadata":{},"sourceType":"module"}